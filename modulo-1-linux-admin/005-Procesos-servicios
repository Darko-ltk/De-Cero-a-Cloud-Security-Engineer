
D√çA 5: GESTI√ìN DE PROCESOS Y SERVICIOS

Objetivo: Dominar la gesti√≥n de procesos del sistema y administraci√≥n de servicios cr√≠ticos para seguridad

FUNDAMENTOS DE PROCESOS EN LINUX
¬øQu√© son los Procesos?
Un proceso es una instancia en ejecuci√≥n de un programa. Como Cloud Security Engineer, la gesti√≥n de procesos es cr√≠tica porque:
    ‚Ä¢ Detecci√≥n de malware: Procesos an√≥malos pueden indicar compromiso del sistema
    ‚Ä¢ An√°lisis forense: Los procesos revelan actividad del atacante
    ‚Ä¢ Optimizaci√≥n de recursos: Procesos mal gestionados crean vulnerabilidades
    ‚Ä¢ Monitoreo de seguridad: Procesos cr√≠ticos deben estar siempre funcionando
Tipos de Procesos
Procesos de usuario:
    ‚Ä¢ Ejecutados por usuarios del sistema
    ‚Ä¢ Tienen permisos limitados
    ‚Ä¢ Pueden ser terminados por el usuario propietario
Procesos del sistema (daemons):
    ‚Ä¢ Ejecutados en segundo plano
    ‚Ä¢ Proporcionan servicios cr√≠ticos (SSH, web, base de datos)
    ‚Ä¢ Generalmente ejecutados como root o usuarios espec√≠ficos
Procesos zombie:
    ‚Ä¢ Procesos terminados que no han sido limpiados
    ‚Ä¢ Pueden indicar problemas de programaci√≥n o ataques
Estados de Procesos
# Ver estados de procesos
ps aux

# Estados posibles:
# R - Running (ejecut√°ndose)
# S - Sleeping (durmiendo)
# D - Uninterruptible sleep (espera de I/O)
# Z - Zombie (terminado pero no limpiado)
# T - Stopped (detenido)
# X - Dead (muerto)

üîç COMANDOS DE GESTI√ìN DE PROCESOS
Comando ps - Visualizar Procesos
Sintaxis b√°sica:
# Procesos del usuario actual
ps

# Todos los procesos del sistema
ps aux

# Procesos en formato √°rbol (jerarqu√≠a)
ps auxf

# Procesos de un usuario espec√≠fico
ps -u admin

# Procesos con informaci√≥n extendida
ps -eo pid,ppid,cmd,user,time,etime,pcpu,pmem

An√°lisis de salida ps aux:
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.1 168548 11984 ?        Ss   10:30   0:01 /sbin/init
admin     1234  0.5  2.1 123456 87654 pts/0    S+   11:00   0:05 python3 app.py

Campos explicados:
    ‚Ä¢ USER: Usuario propietario del proceso
    ‚Ä¢ PID: Process ID (identificador √∫nico)
    ‚Ä¢ %CPU: Porcentaje de CPU utilizado
    ‚Ä¢ %MEM: Porcentaje de memoria utilizado
    ‚Ä¢ VSZ: Memoria virtual total
    ‚Ä¢ RSS: Memoria f√≠sica utilizada
    ‚Ä¢ TTY: Terminal asociado
    ‚Ä¢ STAT: Estado del proceso
    ‚Ä¢ START: Hora de inicio
    ‚Ä¢ TIME: Tiempo total de CPU utilizado
    ‚Ä¢ COMMAND: Comando ejecutado
Comando top - Monitor en Tiempo Real
# Monitor interactivo de procesos
top

# Comandos dentro de top:
# q - salir
# k - matar proceso (kill)
# r - cambiar prioridad (renice)
# M - ordenar por memoria
# P - ordenar por CPU
# u - filtrar por usuario
# 1 - mostrar todos los CPUs
# h - ayuda

Interpretaci√≥n de la salida de top:
top - 11:30:45 up 1 day,  2:15,  2 users,  load average: 0.15, 0.25, 0.20
Tasks: 123 total,   1 running, 122 sleeping,   0 stopped,   0 zombie
%Cpu(s):  2.3 us,  1.1 sy,  0.0 ni, 96.4 id,  0.2 wa,  0.0 hi,  0.0 si,  0.0 st
MiB Mem :   3934.4 total,   2156.8 free,    892.1 used,    885.5 buff/cache
MiB Swap:   2048.0 total,   2048.0 free,      0.0 used.   2834.2 avail Mem

Significado de las m√©tricas:
    ‚Ä¢ load average: Carga promedio del sistema (1, 5, 15 minutos)
    ‚Ä¢ us: Tiempo de CPU en espacio de usuario
    ‚Ä¢ sy: Tiempo de CPU en espacio del kernel
    ‚Ä¢ id: Tiempo de CPU inactivo
    ‚Ä¢ wa: Tiempo esperando I/O
Comando htop - Monitor Avanzado
# Instalar htop (monitor mejorado)
sudo apt install htop

# Ejecutar htop
htop

# Ventajas sobre top:
# - Interfaz m√°s intuitiva
# - Navegaci√≥n con mouse
# - Filtros avanzados
# - Visualizaci√≥n de √°rbol de procesos
# - Colores para mejor legibilidad

Comando pgrep y pkill - B√∫squeda y Terminaci√≥n
# Buscar procesos por nombre
pgrep ssh
pgrep -f "python.*app.py"

# Buscar con informaci√≥n adicional
pgrep -l ssh
pgrep -u admin python

# Matar procesos por nombre
pkill firefox
pkill -u admin python

# Matar con se√±al espec√≠fica
pkill -9 proceso_colgado
pkill -TERM apache2

SE√ëALES DE PROCESOS
Tipos de Se√±ales
Las se√±ales son mecanismos de comunicaci√≥n entre procesos y el kernel:
# Ver todas las se√±ales disponibles
kill -l

# Se√±ales m√°s importantes:
# SIGTERM (15) - Terminaci√≥n elegante (por defecto)
# SIGKILL (9)  - Terminaci√≥n forzada (no se puede ignorar)
# SIGHUP (1)   - Hang up (recargar configuraci√≥n)
# SIGINT (2)   - Interrupci√≥n (Ctrl+C)
# SIGSTOP (19) - Pausar proceso
# SIGCONT (18) - Continuar proceso pausado

Comando kill - Enviar Se√±ales
# Terminar proceso elegantemente
kill 1234

# Terminar proceso forzadamente
kill -9 1234
kill -KILL 1234

# Recargar configuraci√≥n de servicio
kill -HUP 1234
kill -1 1234

# Pausar proceso
kill -STOP 1234

# Continuar proceso pausado
kill -CONT 1234

# Matar todos los procesos de un usuario
sudo pkill -u usuario_malicioso

üéõÔ∏è CONTROL DE TRABAJOS (JOBS)
Ejecuci√≥n en Primer y Segundo Plano
# Ejecutar comando en segundo plano
comando &

# Ejemplo: servidor web de desarrollo
python3 -m http.server 8080 &

# Ver trabajos en ejecuci√≥n
jobs

# Traer trabajo a primer plano
fg %1

# Enviar trabajo a segundo plano
bg %1

# Suspender trabajo actual (Ctrl+Z)
# Luego continuar en segundo plano:
bg

Comando nohup - Procesos Persistentes
# Ejecutar comando que persiste despu√©s del logout
nohup python3 aplicacion.py &

# Redirigir salida a archivo espec√≠fico
nohup ./script.sh > output.log 2>&1 &

# Ver procesos nohup
ps aux | grep nohup

Comando screen y tmux - Sesiones Persistentes
# Instalar screen
sudo apt install screen

# Crear nueva sesi√≥n
screen -S mi_sesion

# Listar sesiones
screen -ls

# Reconectar a sesi√≥n
screen -r mi_sesion

# Desconectar sesi√≥n (Ctrl+A, D)

# Instalar tmux (alternativa moderna)
sudo apt install tmux

# Crear sesi√≥n tmux
tmux new-session -s trabajo

# Listar sesiones tmux
tmux list-sessions

# Reconectar a sesi√≥n tmux
tmux attach-session -t trabajo

üîß GESTI√ìN DE SERVICIOS CON SYSTEMD
¬øQu√© es systemd?
systemd es el sistema de inicializaci√≥n y gesti√≥n de servicios en Ubuntu Server. Como Cloud Security Engineer, debes dominarlo porque:
    ‚Ä¢ Servicios cr√≠ticos: SSH, firewall, web servers dependen de systemd
    ‚Ä¢ Logs centralizados: journald proporciona logging unificado
    ‚Ä¢ Seguridad: Control granular de permisos y recursos
    ‚Ä¢ Automatizaci√≥n: Inicio autom√°tico de servicios cr√≠ticos
Comando systemctl - Control de Servicios
Gesti√≥n b√°sica de servicios:
# Ver estado de un servicio
systemctl status ssh

# Iniciar servicio
sudo systemctl start apache2

# Detener servicio
sudo systemctl stop apache2

# Reiniciar servicio
sudo systemctl restart nginx

# Recargar configuraci√≥n sin reiniciar
sudo systemctl reload nginx

# Habilitar servicio para inicio autom√°tico
sudo systemctl enable ssh

# Deshabilitar servicio
sudo systemctl disable apache2

# Ver si servicio est√° habilitado
systemctl is-enabled ssh

# Ver si servicio est√° activo
systemctl is-active nginx

Listado y b√∫squeda de servicios:
# Listar todos los servicios
systemctl list-units --type=service

# Listar servicios activos
systemctl list-units --type=service --state=active

# Listar servicios fallidos
systemctl list-units --type=service --state=failed

# Buscar servicios por patr√≥n
systemctl list-units --type=service | grep ssh

# Ver servicios habilitados para inicio autom√°tico
systemctl list-unit-files --type=service --state=enabled

An√°lisis de Estado de Servicios
# Estado detallado de servicio
systemctl status ssh

# Salida t√≠pica:
‚óè ssh.service - OpenBSD Secure Shell server
     Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)
     Active: active (running) since Wed 2025-06-19 10:30:15 UTC; 2h 15min ago
       Docs: man:sshd(8)
             man:sshd_config(5)
    Process: 1234 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS)
   Main PID: 1235 (sshd)
      Tasks: 1 (limit: 4915)
     Memory: 2.1M
        CPU: 15ms
     CGroup: /system.slice/ssh.service
             ‚îî‚îÄ1235 /usr/sbin/sshd -D

Interpretaci√≥n del estado:
    ‚Ä¢ Loaded: Servicio cargado y ubicaci√≥n del archivo de configuraci√≥n
    ‚Ä¢ Active: Estado actual (active/inactive/failed)
    ‚Ä¢ Main PID: Proceso principal del servicio
    ‚Ä¢ Tasks: N√∫mero de tareas/hilos
    ‚Ä¢ Memory/CPU: Uso de recursos
    ‚Ä¢ CGroup: Grupo de control para gesti√≥n de recursos
MONITOREO DE RECURSOS DEL SISTEMA
Comando free - Memoria del Sistema
# Informaci√≥n de memoria
free -h

# Salida t√≠pica:
               total        used        free      shared  buff/cache   available
Mem:           3.8Gi       856Mi       2.1Gi        12Mi       885Mi       2.8Gi
Swap:          2.0Gi          0B       2.0Gi

# Monitoreo continuo cada 2 segundos
free -h -s 2

Comando df - Espacio en Disco
# Uso de disco por sistemas de archivos
df -h

# Uso de disco con tipos de sistema de archivos
df -hT

# Uso de inodos
df -i

# Monitorear directorio espec√≠fico
du -sh /var/log/
du -h --max-depth=1 /var/

Comando iostat - Estad√≠sticas de I/O
# Instalar herramientas de sistema
sudo apt install sysstat

# Estad√≠sticas de I/O
iostat

# Monitoreo continuo cada 2 segundos
iostat 2

# Estad√≠sticas extendidas
iostat -x 2

Comando sar - Reporte de Actividad del Sistema
# Uso de CPU
sar -u 1 5

# Uso de memoria
sar -r 1 5

# Actividad de red
sar -n DEV 1 5

# Actividad de disco
sar -d 1 5

# Reporte hist√≥rico (si est√° configurado)
sar -u -f /var/log/sysstat/saXX

RECURSOS GRATUITOS PARA HOY
Recurso Principal: Linux Journey - Processes
URL: https://linuxjourney.com/lesson/monitor-processes-ps-command
M√≥dulos espec√≠ficos para hoy:
    ‚Ä¢ Monitor Processes: Comando ps y variantes
    ‚Ä¢ Process Control: Se√±ales y control de trabajos
    ‚Ä¢ Job Control: Gesti√≥n de trabajos en background
Recurso Complementario: Ubuntu Server Guide - Process Management
URL: https://ubuntu.com/server/docs/service-management
Secciones relevantes:
    ‚Ä¢ Service Management: Gesti√≥n con systemd
    ‚Ä¢ Process Monitoring: Monitoreo de procesos
    ‚Ä¢ System Resources: Gesti√≥n de recursos
Recurso de Systemd: Digital Ocean Guide
URL: https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units
Contenido clave:
    ‚Ä¢ Gesti√≥n completa de servicios systemd
    ‚Ä¢ Configuraci√≥n de servicios personalizados
    ‚Ä¢ Troubleshooting de servicios
Herramienta de Pr√°ctica: Htop Explained
URL: https://peteris.rocks/blog/htop/
Utilidad:
    ‚Ä¢ Explicaci√≥n detallada de htop
    ‚Ä¢ Interpretaci√≥n de m√©tricas
    ‚Ä¢ Optimizaci√≥n de rendimiento
üõ†Ô∏è EJERCICIOS PR√ÅCTICOS DEL D√çA
Laboratorio 1: An√°lisis de Procesos del Sistema
# 1. Explorar procesos actuales
ps aux | head -20

# 2. Identificar procesos que consumen m√°s CPU
ps aux --sort=-%cpu | head -10

# 3. Identificar procesos que consumen m√°s memoria
ps aux --sort=-%mem | head -10

# 4. Buscar procesos espec√≠ficos
pgrep -l ssh
pgrep -l systemd

# 5. Analizar jerarqu√≠a de procesos
ps auxf | grep -A 5 -B 5 ssh

# 6. Crear reporte de procesos
echo "=== REPORTE DE PROCESOS $(date) ===" > ~/proceso_report.txt
echo "=== TOP 5 CPU ===" >> ~/proceso_report.txt
ps aux --sort=-%cpu | head -6 >> ~/proceso_report.txt
echo "=== TOP 5 MEMORIA ===" >> ~/proceso_report.txt
ps aux --sort=-%mem | head -6 >> ~/proceso_report.txt

Laboratorio 2: Gesti√≥n de Servicios Cr√≠ticos
# 1. Verificar servicios cr√≠ticos de seguridad
systemctl status ssh
systemctl status ufw
systemctl status fail2ban

# 2. Analizar servicios en ejecuci√≥n
systemctl list-units --type=service --state=running

# 3. Identificar servicios fallidos
systemctl list-units --type=service --state=failed

# 4. Verificar servicios habilitados para inicio autom√°tico
systemctl list-unit-files --type=service --state=enabled

# 5. Crear servicio personalizado de monitoreo
sudo tee /etc/systemd/system/monitor-security.service > /dev/null <<EOF
[Unit]
Description=Security Monitor Service
After=network.target

[Service]
Type=simple
User=admin
ExecStart=/bin/bash -c 'while true; do echo "$(date): Security check" >> /var/log/security-monitor.log; sleep 300; done'
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# 6. Habilitar y probar el servicio
sudo systemctl daemon-reload
sudo systemctl enable monitor-security.service
sudo systemctl start monitor-security.service
sudo systemctl status monitor-security.service

Laboratorio 3: Monitoreo de Recursos y Rendimiento
# 1. Crear script de monitoreo
cat > ~/system_monitor.sh << 'EOF'
#!/bin/bash
echo "=== MONITOREO DEL SISTEMA $(date) ==="
echo "=== CARGA DEL SISTEMA ==="
uptime
echo ""
echo "=== USO DE MEMORIA ==="
free -h
echo ""
echo "=== USO DE DISCO ==="
df -h
echo ""
echo "=== TOP 5 PROCESOS POR CPU ==="
ps aux --sort=-%cpu | head -6
echo ""
echo "=== TOP 5 PROCESOS POR MEMORIA ==="
ps aux --sort=-%mem | head -6
echo ""
echo "=== SERVICIOS CR√çTICOS ==="
systemctl is-active ssh ufw
echo "================================"
EOF

# 2. Hacer ejecutable el script
chmod +x ~/system_monitor.sh

# 3. Ejecutar monitoreo
./system_monitor.sh

# 4. Programar monitoreo autom√°tico (cada 10 minutos)
# A√±adir a crontab:
# */10 * * * * /home/admin/system_monitor.sh >> /var/log/system_monitor.log

# 5. Simular carga del sistema para pruebas
# Terminal 1: Simular carga CPU
yes > /dev/null &
PID_CPU=$!

# Terminal 2: Monitorear en tiempo real
htop

# Terminar simulaci√≥n
kill $PID_CPU

# 6. Analizar logs del sistema
sudo tail -f /var/log/syslog | grep -E "(error|warning|critical)"




üìä Progreso general: 5/365 d√≠as (1.37%)
Ma√±ana aprenderemos la gesti√≥n de paquetes y actualizaciones de seguridad, elementos fundamentales para mantener sistemas seguros y actualizados contra las √∫ltimas amenazas. ¬°Tu expertise en administraci√≥n de sistemas se consolida cada d√≠a!
